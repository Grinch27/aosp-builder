name: (Dev) Build LineageOS

on:
  repository_dispatch:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Set up JDK
      uses: actions/setup-java@main
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Initialization environment
      id: init
      env:
        DEBIAN_FRONTEND: noninteractive
      working-directory: /
      run: |
        echo -e "Current working directory: $(pwd)"

        packages_install=(
            "bc" 
            "bison" 
            "build-essential" 
            "ccache" 
            "curl" 
            "flex"
            "g++-multilib" 
            "gcc-multilib" 
            "git" 
            "git-lfs" 
            "gnupg"
            "gperf" 
            "imagemagick" 
            "lib32readline-dev" 
            "lib32z1-dev"
            "libelf-dev" 
            "liblz4-tool" 
            "libsdl1.2-dev" 
            "libssl-dev"
            "libxml2" 
            "libxml2-utils" 
            "lzop" 
            "pngcrush" 
            "rsync"
            "schedtool" 
            "squashfs-tools" 
            "xsltproc" 
            "zip" 
            "zlib1g-dev"
        )

        sudo -E apt-get -qq -y update
        sudo -E apt-get -qq -y install "${packages_install[@]}"
        sudo -E systemctl daemon-reload

        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Create simulated physical disk
      id: disk
      # if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
      env:
        path_build: /android/lineage
      working-directory: /
      run: |
        echo -e "Current working directory: $(pwd)"
        # 计算 /mnt 分区的可用空间（减去 1GB 作为缓冲）, 计算根分区的可用空间（减去 4GB 作为缓冲）
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        # 创建一个大小为 mnt_size 的文件 /mnt/mnt.img, 创建一个大小为 root_size 的文件 /root.img
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        # 将这两个文件关联到 loop 设备, 在这两个 loop 设备上创建物理卷, 创建一个名为 github 的卷组，包含这两个物理卷
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7

        # 在 github 卷组上创建一个名为 runner 的逻辑卷，使用所有可用空间, 在 runner 逻辑卷上创建一个 XFS 文件系统
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        # 创建一个挂载点 ${path_build}, 将 runner 逻辑卷挂载到 ${path_build}, 将 ${path_build} 的所有者和组更改为 runner
        sudo mkdir -p ${path_build}
        sudo mount /dev/github/runner ${path_build}
        sudo chown -R runner.runner ${path_build}

        df -Th
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Set up ccache
      id: ccache
      if: ${{ 'true' == 'false' }} # disable
      working-directory: /
      run: |
        export USE_CCACHE=1
        export CCACHE_EXEC=/usr/bin/ccache
        ccache -M 50G

    - name: Initialize LineageOS source
      env:
        branch_lineage: lineage-18.1
      working-directory: /
      run: |
        mkdir -p /android/lineage
        cd /android/lineage
        curl https://storage.googleapis.com/git-repo-downloads/repo > /bin/repo
        chmod a+x /bin/repo
        /bin/repo init -u https://github.com/LineageOS/android.git -b ${{ env.branch_lineage }} --git-lfs
        echo "Repository initialized"

    - name: Sync LineageOS source
      working-directory: /android/lineage
      run: |
        # cd /android/lineage
        repo sync -j4
        echo "Source code synced"

    - name: Build LineageOS
      working-directory: /android/lineage
      run: |
        source build/envsetup.sh
        breakfast ginkgo
        croot
        brunch ginkgo
        echo "Build completed"

    - name: Upload OpenWrt to Release
      id: release
      uses: ncipollo/release-action@main
      with:
        name: "lineageos-build"
        tag: "lineageos"
        artifacts: "/android/lineage/out/target/product/ginkgo/*.zip"
        allowUpdates: true
        removeArtifacts: false
        replacesArtifacts: true
        token: "${{ secrets.GITHUB_TOKEN }}"
        # bodyFile: "${{ env.release_md }}"
        body: "lineageos"

