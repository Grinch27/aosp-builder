name: Build LineageOS

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      manifest-branch:
        description: 'Manifest branch'
        required: true
        default: 'lineage-18.1'
        type: string

jobs:
  build:
    name: Build LineageOS
    runs-on: ubuntu-24.04
    env:
      path_build: "/android/lineage"
      manifest-branch: ${{ inputs.manifest-branch || 'lineage-18.1' }}
    steps:
      - name: Set environment variable
        id: var
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          path_build="${{ env.path_build }}"

          # ========== GITHUB_ENV ==========
          env_vars=(
            "path_build"
          )
          for var in "${env_vars[@]}"; do
            echo "${var}=${!var}" | tee -a $GITHUB_ENV
          done

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clear environment
        id: clearinit
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          docker image list
          # 删除docker所有镜像
          # for image in $(docker images -q); do
          #   docker rmi -f $image
          # done
          # 删除所有不再使用的 docker 镜像、容器、网络和数据卷
          docker image prune -a

          # 如果环境变量 AGENT_TOOLSDIRECTORY 不为空，则删除该目录及其所有内容
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # 删除指定的目录及其所有内容，忽略所有错误信息
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 关闭所有交换空间 删除指定的交换文件
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile

          # 删除所有不再需要的软件包及其配置文件, 清理 apt 的缓存
          packages_purge=(
            "azure-cli*"
            "docker*"
            "ghc*"
            "zulu*"
            "llvm*"
            "firefox"
            "google*"
            "dotnet*"
            "powershell*"
            "openjdk*"
            "mongodb*"
            "moby*"
          )
          sudo -E apt-get -qq -y update
          sudo -E apt-get -qq -y purge "${packages_purge[@]}" || true
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload

          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          packages_install=(
            "bc" 
            "bison" 
            "build-essential" 
            "ccache" 
            "curl" 
            "flex"
            "g++-multilib" 
            "gcc-multilib" 
            "git" 
            "git-lfs" 
            "gnupg"
            "gperf" 
            "imagemagick" 
            "lib32readline-dev" 
            "lib32z1-dev"
            "libelf-dev" 
            "liblz4-tool" 
            "libsdl1.2-dev" 
            "libssl-dev"
            "libxml2" 
            "libxml2-utils" 
            "lzop" 
            "pngcrush" 
            "rsync"
            "schedtool" 
            "squashfs-tools" 
            "xsltproc" 
            "zip" 
            "zlib1g-dev"
          )
          packages_extra=(
            "python3"
          )
          sudo -E apt-get -qq -y update
          sudo -E apt-get -qq -y install "${packages_install[@]}"
          sudo -E apt-get -y install "${packages_extra[@]}"
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload

          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Setup JDK
        uses: actions/setup-java@main
        with:
          distribution: 'temurin'
          java-version: '21'
      
      - name: Create simulated physical disk
        id: disk
        env:
          path_build: ${{ env.path_build }}
          mnt_num: 1
          root_num: 4
        working-directory: /
        run: |
          echo "Current working directory: $(pwd)"

          # 获取 /mnt 和 / 分区的剩余空间
          mnt_available=$(df -B1 /mnt | tail -1 | awk '{print $4}')
          root_available=$(df -B1 / | tail -1 | awk '{print $4}')
          echo "Raw available space in /mnt (bytes): ${mnt_available}"
          echo "Raw available space in / (bytes): ${root_available}"

          # 减去缓冲空间：/mnt 和 / 分区分别减去缓冲
          gb2bytes=$((1024 * 1024 * 1024))
          mnt_size=$((${mnt_available} - ${{ env.mnt_num }} * ${gb2bytes} ))
          root_size=$((${root_available} - ${{ env.root_num }} * ${gb2bytes} ))
          echo "Available space in /mnt (bytes): ${mnt_size}"
          echo "Available space in / (bytes): ${root_size}"

          # 使用 LVM 创建物理卷、卷组和逻辑卷
          # sudo pvcreate /dev/loop6
          # sudo vgcreate github /dev/loop6

          # 使用 LVM 创建物理卷、卷组和逻辑卷，将文件关联到 loop 设备, 在这两个 loop 设备上创建物理卷, 创建一个名为 github 的卷组，包含这两个物理卷
          sudo truncate -s "${mnt_size}" /mnt/mnt.img
          sudo truncate -s "${root_size}" /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7

          # 在 github 卷组上创建一个名为 runner 的逻辑卷，使用所有可用空间, 在 runner 逻辑卷上创建一个 XFS 文件系统
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner

          # 创建一个挂载点 ${path_build}, 将 runner 逻辑卷挂载到 ${path_build}, 将 ${path_build} 的所有者和组更改为 runner
          sudo mkdir -p "${path_build}"
          sudo mount /dev/github/runner "${path_build}"
          sudo chown -R runner:runner "${path_build}"

          df -Th
          echo "status=success" >> "${GITHUB_OUTPUT}"

      - name: Setup ccache
        id: ccache
        if: ${{ 'true' == 'false' }} # disable
        working-directory: /
        run: |
          export USE_CCACHE=1
          export CCACHE_EXEC=/usr/bin/ccache
          ccache -M 50G
          ccache -o compression=true

      - name: Initialize repo
        id: init-repo
        working-directory: /
        run: |
          echo "Current working directory: $(pwd)"

          mkdir -p ~/bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+rx ~/bin/repo
          # if [ -d "$HOME/bin" ] ; then
          #   export PATH="$HOME/bin:$PATH"
          # fi

      - name: Initialize LineageOS source
        working-directory: ${{ env.path_build }}
        run: |
          echo "Current working directory: $(pwd)"
          export PATH=~/bin:$PATH

          repo init -u https://github.com/LineageOS/android.git \
            --manifest-branch ${{ env.manifest-branch }}
            # --depth=1 \
            # --git-lfs \
            # --verbose
          
          df -Th
          echo "Repository initialized"

      - name: Sync LineageOS source
        id: sync
        working-directory: ${{ env.path_build }}
        run: |
          echo "Current working directory: $(pwd)"
          export PATH=~/bin:$PATH

          repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags
          df -Th
          echo "Source code synced"

      - name: Build LineageOS
        id: build
        env:
          target: "ginkgo"
        working-directory: ${{ env.path_build }}
        run: |
          echo "Current working directory: $(pwd)"
          export PATH=~/bin:$PATH

          source build/envsetup.sh
          breakfast ${{ env.target }}
          croot
          brunch ${{ env.target }} -j$(nproc --all)
          echo "Build completed"

      - name: Upload OpenWrt to Release
        id: release
        uses: ncipollo/release-action@main
        with:
          name: "lineageos-build"
          tag: "lineageos"
          artifacts: "${{ env.path_build }}/out/target/product/ginkgo/*.zip"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: "${{ secrets.GITHUB_TOKEN }}"
          # bodyFile: "${{ env.release_md }}"
          body: "lineageos"
