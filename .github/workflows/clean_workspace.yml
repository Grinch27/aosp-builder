name: (Dev) Workspace Cleaner

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      manifest-branch:
        description: "Manifest branch"
        required: true
        default: "lineage-18.1"
        type: string
      android-version:
        description: "Android version"
        required: true
        default: "ginkgo"
        type: string
      custom_env:
        description: "key=value;key=value"
        type: string
        required: false
        default: ""

env:
  custom_env: ${{ inputs.custom_env || '' }}

jobs:
  build:
    name: Clean Workspace
    runs-on: ubuntu-24.04
    env:
      path_build: "/android/lineage"
      manifest-branch: ${{ inputs.manifest-branch || 'lineage-18.1' }}
      android-version: ${{ inputs.android-version || 'ginkgo' }}
    steps:
      - name: Set environment variable
        id: var
        if: ${{ 'true' == 'false' }} # disable
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          path_build="${{ env.path_build }}"

          # ========== GITHUB_ENV ==========
          env_vars=(
            "path_build"
          )
          for var in "${env_vars[@]}"; do
            echo "${var}=${!var}" | tee -a $GITHUB_ENV
          done

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Load Custom Environment Variables
        id: env-custom
        if: ${{ env.custom_env != '' }}
        env:
          flag_split: ";"
        working-directory: /
        run: |
          echo "${{ env.custom_env }}" | tr '${{ env.flag_split }}' '\n' | tee -a $GITHUB_ENV

      - name: Clean Snap
        id: clean-snap
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          sudo -E apt-get -qq -y update
          sudo snap list

          # ===== Remove snap =====
          for p in $(snap list | awk '{print $1}'); do
            sudo snap remove $p
          done
          sudo systemctl stop snapd
          sudo systemctl disable --now snapd.socket
          sudo apt-get -qq -y autoremove --purge snapd
          sudo rm -rf ~/snap
          sudo rm -rf /snap
          sudo rm -rf /var/snap
          sudo rm -rf /var/lib/snapd
          sudo rm -rf /var/cache/snapd
          sudo bash -c 'cat <<EOF > /etc/apt/preferences.d/nosnap.pref
          Package: snapd
          Pin: release a=*
          Pin-Priority: -10
          EOF'
          sudo -E systemctl daemon-reload

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clean Runner
        id: clean-runner
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          # ===== Clean Docker =====
          docker image list
          # for image in $(docker images -q); do
          #   docker rmi -f $image
          # done
          docker image prune -a -f

          # https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md
          sudo -E apt-get -qq -y update
          installed_packages=$(dpkg-query -W -f='${binary:Package}\n')
          
          # ===== Clean Apt =====
          # ----- package for purge -----
          packages_purge=(
            "docker*"
            "ghc*"
            "zulu*"
            "google*"
            "firefox*"
            "dotnet*"
            "powershell*"
            "openjdk*"
            "mongodb*"
            "moby*"
            "mysql*"
            "postgresql*"
            "sqlite3*"
            "apache2*"
            "nginx*"
            "php*"
          )
          sudo -E apt-get -qq -y autoremove --purge "${packages_purge[@]}"

          # ----- package for re-install -----
          regexes=(
            # ----- Language and Runtime -----
            "clang-[0-9]+.*"
            "clang-format-[0-9]+.*"
            "clang-tidy-[0-9]+.*"
            "gcc-[0-9]+.*"
            "libgcc-[0-9]+.*"
            "g++-[0-9]+.*"
            "cpp-[0-9]+.*"
            "libstdc++-[0-9]+.*"
            "gfortran-[0-9]+.*"
            "libgfortran-[0-9]+.*"
            # ----- Java -----
            "temurin-[0-9]+-jdk"
          )
          packages_purge=()
          for regex in "${regexes[@]}"; do
            for package in $installed_packages; do
              if [[ $package =~ $regex ]]; then
                  packages_purge+=("$package")
              fi
            done
          done

          echo "Packages to be purged: ${packages_purge[@]}"
          set +e
          for package in "${packages_purge[@]}"; do
            echo "Attempting to remove $package"
            sudo -E apt-get -qq -y autoremove --purge $package
            if [[ $? -ne 0 ]]; then
              echo "Failed to remove $package"
            fi
          done
          set -e

          packages_install=(
            # ----- Language and Runtime -----
            "clang"
            "clang-format"
            "clang-tidy"
            "gcc"
            "libgcc-13-dev"
            "g++"
            "cpp"
            "libstdc++-13-dev"
            "gfortran"
            "libgfortran-13-dev"
            # ----- Java -----
            "openjdk-21-jdk"
          )
          echo "Packages to be installed: ${packages_install[@]}"
          sudo -E apt-get -qq -y install "${packages_install[@]}"

          # ----- check extra packages -----
          ls -lh /usr/local/share/
          ls -lh /usr/share/

          # ===== Clean Swap =====
          # 如果环境变量 AGENT_TOOLSDIRECTORY 不为空，则删除该目录及其所有内容
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # 删除指定的目录及其所有内容，忽略所有错误信息
          # sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 关闭所有交换空间 删除指定的交换文件
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile

          # ===== reload =====
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload
          
          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          packages_slim=(
            "bc"
            "bison"
            "build-essential"
            "ca-certificates"
            "curl"
            "flex"
            "g++"
            "gcc"
            "gcc-aarch64-linux-gnu"
            "git"
            "git-lfs"
            "gnupg"
            "gperf"
            "libelf-dev"
            "lz4"
            "libssl-dev"
            "libxml2"
            "libxml2-utils"
            "lzop"
            "make"
            "python3"
            "rsync"
            "schedtool"
            "squashfs-tools"
            "xsltproc"
            "zip"
            "zlib1g-dev"
          )
          packages_extra=(
            "imagemagick"
            "lib32readline-dev"
            "lib32z1-dev"
            "libsdl1.2-dev"
            "pngcrush"
            "vim"
          )
          sudo -E apt-get -y -qq update
          sudo -E apt-get -y -qq install "${packages_slim[@]}"
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload

          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Setup JDK
        uses: actions/setup-java@main
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Check Apt
        id: check-apt
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          apt list --installed
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n

          sudo -E apt-get autoremove --purge -y -qq
          sudo -E apt-get clean -y -qq
          # sudo -E rm -rf /var/lib/apt/lists/*
          # sudo -E rm -rf /var/log/*.log

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        env:
          path_build: ${{ env.path_build }}
          mnt_num: 1
          root_num: 4
        working-directory: /
        run: |
          echo "Current working directory: $(pwd)"

          # 获取 /mnt 和 / 分区的剩余空间
          mnt_available=$(df -B1 /mnt | tail -1 | awk '{print $4}')
          root_available=$(df -B1 / | tail -1 | awk '{print $4}')
          echo "Raw available space in /mnt (bytes): ${mnt_available}"
          echo "Raw available space in / (bytes): ${root_available}"

          # 减去缓冲空间：/mnt 和 / 分区分别减去缓冲
          gb2bytes=$((1024 * 1024 * 1024))
          mnt_size=$((${mnt_available} - ${{ env.mnt_num }} * ${gb2bytes} ))
          root_size=$((${root_available} - ${{ env.root_num }} * ${gb2bytes} ))
          echo "Available space in /mnt (bytes): ${mnt_size}"
          echo "Available space in / (bytes): ${root_size}"

          # 使用 LVM 创建物理卷、卷组和逻辑卷
          # sudo pvcreate /dev/loop6
          # sudo vgcreate github /dev/loop6

          # 使用 LVM 创建物理卷、卷组和逻辑卷，将文件关联到 loop 设备, 在这两个 loop 设备上创建物理卷, 创建一个名为 github 的卷组，包含这两个物理卷
          sudo truncate -s "${mnt_size}" /mnt/mnt.img
          sudo truncate -s "${root_size}" /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7

          # 在 github 卷组上创建一个名为 runner 的逻辑卷，使用所有可用空间, 在 runner 逻辑卷上创建一个 XFS 文件系统
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner

          # 创建一个挂载点 ${path_build}, 将 runner 逻辑卷挂载到 ${path_build}, 将 ${path_build} 的所有者和组更改为 runner
          sudo mkdir -p "${path_build}"
          sudo mount /dev/github/runner "${path_build}"
          sudo chown -R runner:runner "${path_build}"

          df -Th
          echo "status=success" >> "${GITHUB_OUTPUT}"
